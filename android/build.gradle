android {
    buildToolsVersion "28.0.1"
    compileSdkVersion 27

    def keyFileExist    = false
    keyFileExist        = file("./keys/keysigning.properties").exists()

    def keysigningFile  = null
    def keysigning      = null
    if(keyFileExist)
    {
        keysigningFile  = file("./keys/keysigning.properties")
        keysigning      = new Properties()
        keysigning.load(new FileInputStream(keysigningFile))
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
    }

    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }

    defaultConfig {
        applicationId "com.funtech.gdxar"
        minSdkVersion 19
        targetSdkVersion 25
        multiDexEnabled true
        versionCode 1
        versionName "1.0.0"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs
    {
        release
        {
            if(keyFileExist)
            {
                storeFile file(keysigning['keystoreFile'])
                storePassword keysigning['keystorePassword']
                keyAlias keysigning['keyAlias']
                keyPassword keysigning['keyPassword']
                v2SigningEnabled true
            }
        }
    }


    buildTypes {
        release
        {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all
            {
                variant ->
                variant.outputs.each
                {
                    output ->
                    def formattedDate = new Date().format('yyyyMMddHHmm')
                    def newName = output.outputFile.name
                    newName = newName.replace("android-", "$project.ext.appName-")
                    newName = newName.replace("release", "v$versionName-" + formattedDate)
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }

            if(keyFileExist)
            {
                signingConfig signingConfigs.release
            }
            zipAlignEnabled true
        }

        debug
        {
            versionNameSuffix "-debug"
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    //def formattedDate = new Date().format('yyyyMMddHHmm')
                    def newName = output.outputFile.name
                    newName = newName.replace("android-", "$project.ext.appName-")
                    //newName = newName.replace("debug", "v$versionName-" + formattedDate)
                    newName = newName.replace("debug", "v$versionName")
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
    }

    dataBinding {
        enabled = true
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/arm64-v8a/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")

        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.funtech.gdxar/com.funtech.gdxar.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
